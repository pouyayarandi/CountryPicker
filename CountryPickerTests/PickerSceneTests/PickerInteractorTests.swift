//
//  PickerInteractorTests.swift
//  CountryPicker
//
//  Created by Pouya Yarandi on 11/6/20.
//  Copyright (c) 2020 RoundTable. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CountryPicker
import PromiseKit
import XCTest

class PickerInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: PickerInteractor!
    var worker: CountrySelectorWorker!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupPickerInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPickerInteractor() {
        worker = CountrySelectorWorker()
        sut = PickerInteractor(selectorWorker: worker)
    }
    
    // MARK: Test doubles
    
    class PickerPresentationLogicSpy: PickerPresentationLogic {
        var presentingCountries: [Picker.Country.Response] = []
        func presentCountries(countries: [Picker.Country.Response], selectorWorker: CountrySelectorWorker) {
            presentingCountries = countries
        }
    }
    
    // MARK: Tests
    
    func testSearchRelativeQuery() {
        // Given
        let spy = PickerPresentationLogicSpy()
        sut.presenter = spy
        let countries = [
            Picker.Country.Response(id: "IRN", name: "Iran"),
            Picker.Country.Response(id: "IRQ", name: "Iraq"),
            Picker.Country.Response(id: "ENG", name: "England")
        ]
        let query = "ir"
        
        // When
        sut.setCountries(countries: countries)
        sut.searchCountry(query: query)
        
        // Then
        XCTAssertEqual(spy.presentingCountries.count, 2)
    }
    
    func testSearchIrrelativeQuery() {
        // Given
        let spy = PickerPresentationLogicSpy()
        sut.presenter = spy
        let countries = [
            Picker.Country.Response(id: "IRN", name: "Iran"),
            Picker.Country.Response(id: "IRQ", name: "Iraq"),
            Picker.Country.Response(id: "ENG", name: "England")
        ]
        let query = "us"
        
        // When
        sut.setCountries(countries: countries)
        sut.searchCountry(query: query)
        
        // Then
        XCTAssertEqual(spy.presentingCountries.count, 0)
    }
    
    func testSearchEmptyList() {
        // Given
        let spy = PickerPresentationLogicSpy()
        sut.presenter = spy
        let countries: [Picker.Country.Response] = []
        let query = "us"
        
        // When
        sut.setCountries(countries: countries)
        sut.searchCountry(query: query)
        
        // Then
        XCTAssertEqual(spy.presentingCountries.count, 0)
    }
}
